return (function(L_1_arg1, L_2_arg2, L_3_arg3, L_4_arg4, L_5_arg5, L_6_arg6, L_7_arg7, L_8_arg8, L_9_arg9, L_10_arg10, L_11_arg11, L_12_arg12, L_13_arg13, L_14_arg14, L_15_arg15, L_16_arg16, L_17_arg17, L_18_arg18, L_19_arg19, L_20_arg20, L_21_arg21, L_22_arg22, L_23_arg23, L_24_arg24, L_25_arg25, L_26_arg26, L_27_arg27, L_28_arg28, L_29_arg29, L_30_arg30, L_31_arg31, L_32_arg32, L_33_arg33, L_34_arg34, L_35_arg35, L_36_arg36, L_37_arg37, ...)
	local L_38_ = select;
	local L_39_, L_40_, L_41_, L_42_, L_43_, L_44_, L_45_, L_46_, L_47_, L_48_, L_49_, L_50_, L_51_, L_52_ = 0, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil;
	repeat
		if not(L_39_ <= 0X05) then
			if L_39_ <= 8 then
				if L_39_ <= 0X0006 then
					L_51_ = L_29_arg29;
					do
						L_39_ = 12;
					end;
				else
					if L_39_ == 0x7 then
						do
							L_48_ = L_20_arg20.sub;
						end;
						L_39_ = 0Xb;
						continue;
					else
						L_43_ = 1;
						L_39_ = 0Xa;
						do
							continue;
						end;
					end;
				end;
			else
				do
					if L_39_ <= 10 then
						do
							if L_39_ == 9 then
								L_50_ = L_18_arg18;
								L_39_ = 0X6;
							else
								do
									L_44_ = L_20_arg20.gsub;
								end;
								L_39_ = 0x1;
							end;
						end;
					else
						if L_39_ == 0XB then
							do
								L_49_ = L_20_arg20.rep;
							end;
							L_39_ = 0X9;
						else
							L_52_ = L_10_arg10;
							L_39_ = 0Xd;
						end;
					end;
				end;
			end;
		elseif L_39_ <= 0X2 then
			if L_39_ <= 0 then
				L_40_ = {
					[0X0000] = 1
				};
				L_39_ = 5;
			else
				if L_39_ ~= 0X0001 then
					L_47_ = L_23_arg23;
					do
						L_39_ = 0x00007;
					end;
					continue;
				else
					L_45_ = L_24_arg24;
					L_39_ = 0X3;
					continue;
				end;
			end;
		else
			if not(L_39_ <= 3) then
				if L_39_ ~= 4 then
					do
						L_41_ = bit32.bxor;
					end;
					L_39_ = 0x4;
					continue;
				else
					L_42_ = L_32_arg32;
					do
						L_39_ = 0X8;
					end;
					do
						continue;
					end;
				end;
			else
				do
					L_46_ = L_30_arg30;
				end;
				L_39_ = 2;
			end;
		end;
	until L_39_ >= 13;
	local L_53_ = next;
	local L_54_ = (rawget);
	local L_55_, L_56_, L_57_, L_58_, L_59_ = L_11_arg11, nil, nil, nil, nil;
	for L_99_forvar1 = 0X0, 3 do
		if L_99_forvar1 <= 0X001 then
			do
				if L_99_forvar1 == 0 then
					L_56_ = L_15_arg15;
				else
					L_57_ = string.unpack;
				end;
			end;
		else
			if L_99_forvar1 == 2 then
				do
					L_58_ = L_36_arg36.rshift;
				end;
				do
					continue;
				end;
			else
				do
					L_59_ = {
						[L_26_arg26] = 8,
						[L_34_arg34] = -1127752079,
						[1] = L_12_arg12,
						[0x2] = 0X00007,
						[0X7] = 2,
						[0X7] = -963071709,
						[3] = 4,
						[0X7] = 0X2,
						[0x00004] = 0X8,
						[5] = 0X02,
						[0X9] = 0x5,
						[0X1] = 5,
						[0] = 0X3
					};
				end;
				continue;
			end;
		end;
	end;
	local L_60_ = getfenv;
	local L_61_ = (L_60_());
	L_39_ = 5;
	local L_62_, L_63_, L_64_, L_65_, L_66_ = nil, nil, nil, nil, (nil);
	do
		while L_39_ <= 5 do
			if L_39_ <= 2 then
				if not(L_39_ <= 0x00000) then
					if L_39_ == 0X1 then
						L_39_ = 0X0;
					else
						do
							L_63_ = {};
						end;
						L_39_ = 0X00001;
						continue;
					end;
				else
					L_62_ = L_44_(L_48_(L_62_, 0X5), "..", function(L_100_arg1)
						if L_47_(L_100_arg1, 2) == L_6_arg6 then
							local L_101_ = 0X00001;
							while 0.9921294137156792 do
								if L_101_ ~= 0 then
									L_64_ = L_42_(L_48_(L_100_arg1, 1, 0x0001));
									L_101_ = 0;
								else
									return "";
								end;
							end;
						else
							local L_102_, L_103_ = 0x0001, nil;
							while L_102_ < 0X2 do
								if L_102_ == 0 then
									if not(L_64_) then
										return L_103_;
									else
										local L_104_ = (nil);
										do
											for L_105_forvar1 = 0, 2 do
												if L_105_forvar1 <= 0 then
													L_104_ = L_49_(L_103_, L_64_);
												else
													do
														if L_105_forvar1 == 0x1 then
															do
																L_64_ = nil;
															end;
														else
															do
																return L_104_;
															end;
														end;
													end;
												end;
											end;
										end;
									end;
									L_102_ = 2;
								else
									do
										L_103_ = L_52_(L_42_(L_100_arg1, 16));
									end;
									L_102_ = 0;
								end;
							end;
						end;
					end);
					L_39_ = 4;
					continue;
				end;
			else
				if not(L_39_ <= 3) then
					if L_39_ ~= 4 then
						L_62_ = L_8_arg8;
						L_39_ = 2;
					else
						L_65_ = function()
							local L_106_ = (L_47_(L_62_, L_43_, L_43_));
							do
								L_43_ = L_43_ + 1;
							end;
							return L_106_;
						end;
						L_39_ = 3;
					end;
				else
					L_66_ = function()
						local L_107_, L_108_ = L_57_("<I4", L_62_, L_43_);
						L_43_ = L_108_;
						return L_107_;
					end;
					L_39_ = 0x6;
				end;
			end;
		end;
	end;
	L_39_ = 0X03;
	local L_67_, L_68_, L_69_, L_70_, L_71_, L_72_, L_73_, L_74_, L_75_ = nil, nil, nil, nil, nil, nil, nil, nil, (nil);
	while L_39_ ~= 10 do
		do
			if L_39_ <= 4 then
				if not(L_39_ <= 1) then
					do
						if L_39_ <= 2 then
							L_71_ = 0x2 ^ 52;
							do
								L_39_ = 0X000;
							end;
						else
							do
								if L_39_ == 3 then
									L_67_ = L_25_arg25;
									L_39_ = 0X5;
								else
									L_74_ = L_68_ - 1;
									do
										L_39_ = 0X7;
									end;
								end;
							end;
						end;
					end;
				else
					if L_39_ == 0x0 then
						L_72_ = table.insert;
						L_39_ = 9;
						continue;
					else
						do
							L_69_ = 0X00100000000;
						end;
						L_39_ = 0x008;
						continue;
					end;
				end;
			elseif not(L_39_ <= 6) then
				if not(L_39_ <= 7) then
					if L_39_ ~= 0X8 then
						L_73_ = {};
						do
							L_39_ = 4;
						end;
					else
						L_70_ = L_9_arg9;
						L_39_ = 0x2;
					end;
				else
					do
						local L_109_ = (2);
						for L_110_forvar1 = 1, 0X1F do
							do
								(L_40_)[L_110_forvar1] = L_109_;
							end;
							L_109_ = L_109_ * L_16_arg16;
						end;
					end;
					L_39_ = 6;
				end;
			else
				if L_39_ == 0x5 then
					L_68_ = 0X80000000;
					L_39_ = 1;
				else
					L_75_ = function()
						local L_111_, L_112_ = L_57_("<i8", L_62_, L_43_);
						do
							L_43_ = L_112_;
						end;
						do
							return L_111_;
						end;
					end;
					do
						L_39_ = 10;
					end;
				end;
			end;
		end;
	end;
	local L_76_ = L_69_ - 0X1;
	local L_77_ = setmetatable;
	L_39_ = 0X0;
	local L_78_, L_79_ = nil, (nil);
	repeat
		if L_39_ == 0 then
			L_78_ = function()
				local L_113_, L_114_ = nil, (nil);
				for L_115_forvar1 = 0, 2 do
					if not(L_115_forvar1 <= 0X0000) then
						if L_115_forvar1 == 0x1 then
							L_43_ = L_114_;
							continue;
						else
							return L_113_;
						end;
					else
						do
							L_113_, L_114_ = L_57_("\<d", L_62_, L_43_);
						end;
						continue;
					end;
				end;
			end;
			L_39_ = 0X1;
			continue;
		else
			L_79_ = bit32.bor;
			L_39_ = 0X002;
			continue;
		end;
	until L_39_ > 0x1;
	local L_80_ = (L_22_arg22);
	L_39_ = 2;
	local L_81_, L_82_, L_83_, L_84_, L_85_, L_86_ = nil, nil, nil, nil, nil, nil;
	while L_39_ < 0X00006 do
		do
			if not(L_39_ <= 0X2) then
				do
					if L_39_ <= 0X03 then
						L_84_ = function()
							local L_116_, L_117_ = 0, 0x0;
							do
								while 0.6505594393095269 do
									local L_118_ = (L_47_(L_62_, L_43_, L_43_));
									L_43_ = L_43_ + 0x1;
									L_117_ = L_79_(L_117_, L_81_(L_80_(L_118_, 127), L_116_));
									if L_80_(L_118_, 128) == 0X0 then
										return L_117_;
									end;
									L_116_ = L_116_ + 0X7;
								end;
							end;
						end;
						L_39_ = 0x0001;
						do
							continue;
						end;
					else
						if L_39_ == 0X4 then
							L_83_ = {
								0X0003,
								2,
								0X1
							};
							do
								L_39_ = 0X003;
							end;
						else
							L_86_ = function()
								local L_119_ = (0);
								local L_120_ = nil;
								while true do
									if L_119_ <= 0X0000 then
										L_120_ = L_84_();
										do
											L_119_ = 0X1;
										end;
									else
										do
											if L_119_ == 1 then
												if L_120_ > L_74_ then
													return L_120_ - L_69_;
												end;
												L_119_ = 0x2;
												continue;
											else
												return L_120_;
											end;
										end;
									end;
								end;
							end;
							L_39_ = 0x6;
						end;
					end;
				end;
			else
				if L_39_ <= 0x0 then
					L_82_ = bit32.bnot;
					L_39_ = 0X4;
					continue;
				else
					do
						if L_39_ ~= 0x0001 then
							L_81_ = bit32.lshift;
							L_39_ = 0x00000;
						else
							do
								L_85_ = L_14_arg14;
							end;
							L_39_ = 0X5;
							continue;
						end;
					end;
				end;
			end;
		end;
	end;
	L_39_ = 0X1;
	local L_87_, L_88_ = nil, (nil);
	do
		repeat
			if L_39_ ~= 0X0 then
				L_87_ = L_7_arg7;
				L_39_ = 0;
				continue;
			else
				L_88_ = function(L_121_arg1, L_122_arg2, L_123_arg3)
					local L_124_ = (L_121_arg1 / L_40_[L_122_arg2]) % L_40_[L_123_arg3];
					L_124_ = L_124_ - L_124_ % 1;
					return L_124_;
				end;
				break;
			end;
		until (false);
	end;
	local L_89_ = L_65_();
	local L_90_ = L_65_();
	L_39_ = 0;
	local L_91_, L_92_ = nil, (nil);
	do
		while L_39_ <= 1 do
			do
				if L_39_ == 0 then
					L_91_ = function(L_125_arg1)
						local L_126_, L_127_, L_128_, L_129_, L_130_ = nil, nil, nil, nil, (nil);
						for L_131_forvar1 = 0x0, 0X05 do
							if L_131_forvar1 <= 2 then
								if L_131_forvar1 <= 0 then
									L_126_ = {
										L_47_(L_62_, L_43_, L_43_ + 0X3)
									};
									continue;
								else
									if L_131_forvar1 ~= 0X1 then
										L_128_ = L_41_(L_126_[0X2], L_90_);
									else
										L_127_ = L_41_(L_126_[1], L_90_);
										continue;
									end;
								end;
							elseif not(L_131_forvar1 <= 3) then
								if L_131_forvar1 ~= 0X4 then
									L_90_ = (241 * L_90_ + L_125_arg1) % 256;
									continue;
								else
									L_130_ = L_41_(L_126_[L_21_arg21], L_90_);
								end;
							else
								L_129_ = L_41_(L_126_[3], L_90_);
							end;
						end;
						L_43_ = L_43_ + 4;
						return L_130_ * 0x01000000 + L_129_ * 65536 + L_128_ * 0X100 + L_127_;
					end;
					L_39_ = 0X001;
				else
					L_92_ = function(...)
						return L_38_('\#', ...), {
							...
						};
					end;
					L_39_ = 2;
					continue;
				end;
			end;
		end;
	end;
	do
		L_39_ = 0X0;
	end;
	local L_93_, L_94_, L_95_, L_96_ = nil, nil, nil, (nil);
	do
		while L_39_ < 0X5 do
			if L_39_ <= 0X1 then
				if L_39_ ~= 0 then
					do
						L_39_ = 0X3;
					end;
					continue;
				else
					L_93_ = function(L_132_arg1)
						local L_133_, L_134_, L_135_ = 4, nil, nil;
						repeat
							do
								if not(L_133_ <= 1) then
									if not(L_133_ <= 0X2) then
										if L_133_ == 0X3 then
											for L_136_forvar1 = L_1_arg1, L_134_, 0x0001f3D do
												local L_137_ = (1);
												local L_138_, L_139_ = nil, (nil);
												repeat
													do
														if not(L_137_ <= 0x01) then
															do
																if L_137_ == 2 then
																	if not(L_138_ > L_134_) then
																	else
																		do
																			L_138_ = L_134_;
																		end;
																	end;
																	L_137_ = 3;
																else
																	L_139_ = {
																		L_47_(L_62_, L_43_ + L_136_forvar1 - 1, L_43_ + L_138_ - 1)
																	};
																	do
																		L_137_ = 0X0;
																	end;
																end;
															end;
														else
															if L_137_ == 0 then
																for L_140_forvar1 = 0X0001, #L_139_ do
																	do
																		(L_139_)[L_140_forvar1] = L_41_(L_139_[L_140_forvar1], L_89_);
																	end;
																	do
																		L_89_ = (L_132_arg1 * L_89_ + L_4_arg4) % 0X00100;
																	end;
																end;
																break;
															else
																L_138_ = L_136_forvar1 + L_2_arg2 - 0X1;
																L_137_ = 2;
																do
																	continue;
																end;
															end;
														end;
													end;
												until (false);
												do
													L_135_ = L_135_..L_52_(L_70_(L_139_));
												end;
											end;
											L_133_ = 0;
										else
											L_134_ = L_66_();
											L_133_ = 0X2;
											continue;
										end;
									else
										L_135_ = "";
										do
											L_133_ = 0x3;
										end;
										continue;
									end;
								else
									if L_133_ == 0X0 then
										L_43_ = L_43_ + L_134_;
										do
											L_133_ = 0X1;
										end;
										continue;
									else
										do
											return L_135_;
										end;
									end;
								end;
							end;
						until (false);
					end;
					L_39_ = 0X0004;
					continue;
				end;
			else
				if L_39_ <= 2 then
					L_95_ = 0X0001;
					do
						L_39_ = 0X1;
					end;
				else
					if L_39_ ~= 3 then
						L_94_ = L_28_arg28;
						L_39_ = 2;
					else
						function L_96_(L_141_arg1, L_142_arg2, L_143_arg3)
							local L_144_ = L_142_arg2[0x9];
							local L_145_ = (L_142_arg2[5]);
							local L_146_ = L_142_arg2[0x8];
							local L_147_, L_148_ = L_142_arg2[7], L_142_arg2[2];
							local L_149_, L_150_ = L_142_arg2[0X1], (L_142_arg2[0X3]);
							local L_151_ = L_77_({}, {
								__mode = '\118'
							});
							local L_152_, L_153_ = L_142_arg2[6], (nil);
							L_153_ = function(...)
								local L_154_, L_155_ = 0X1, {};
								local L_156_ = ({
									[1] = L_155_,
									[0X0002] = L_142_arg2
								});
								local L_157_ = L_60_();
								local L_158_, L_159_ = L_92_(...);
								L_158_ = L_158_ - 0X1;
								local L_160_ = ((L_157_ == L_61_ and L_141_arg1 or L_157_));
								for L_162_forvar1 = 0x000, L_158_ do
									do
										if L_147_ > L_162_forvar1 then
											do
												L_155_[L_162_forvar1] = L_159_[L_162_forvar1 + 0X0001];
											end;
										else
											break;
										end;
									end;
								end;
								do
									if not L_144_ then
										do
											L_159_ = nil;
										end;
									else
										if not(L_146_) then
										else
											(L_155_)[L_147_] = {
												n = L_158_ >= L_147_ and L_158_ - L_147_ + 0X01 or 0X0,
												L_70_(L_159_, L_147_ + 0X1, L_158_ + 0X01)
											};
										end;
									end;
								end;
								do
									if L_160_ ~= L_157_ then
										(L_87_)(L_153_, L_160_);
									end;
								end;
								local L_161_ = (0x0000);
								while '\051\080\_b\r)\i\q\^' do
									local L_163_ = L_149_[L_154_];
									local L_164_ = (L_163_[0X6]);
									L_154_ = L_154_ + 1;
									if not(L_164_ < 51) then
										do
											if not(L_164_ >= 0x4c) then
												if not(L_164_ >= 0X3f) then
													if not(L_164_ < 0X39) then
														if not(L_164_ >= 60) then
															if not(L_164_ >= 58) then
																local L_165_ = (L_163_[1]);
																L_155_[L_165_] = L_155_[L_165_](L_155_[L_165_ + 1], L_155_[L_165_ + 2]);
																do
																	L_161_ = L_165_;
																end;
															else
																if L_164_ ~= 59 then
																	local L_166_ = L_163_[1];
																	L_155_[L_166_](L_70_(L_155_, L_166_ + 0X01, L_161_));
																	do
																		L_161_ = L_166_ - 0x1;
																	end;
																else
																	do
																		(L_155_)[L_163_[1]] = true;
																	end;
																end;
															end;
														else
															if not(L_164_ < 61) then
																if L_164_ ~= 0X3E then
																	local L_167_ = L_163_[1];
																	do
																		L_161_ = L_167_ + L_163_[0X3] - 0X1;
																	end;
																	(L_155_)[L_167_] = L_155_[L_167_](L_70_(L_155_, L_167_ + 1, L_161_));
																	L_161_ = L_167_;
																else
																	if L_155_[L_163_[0X3]] <= L_155_[L_163_[2]] then
																		L_154_ = L_163_[0X1];
																	end;
																end;
															else
																local L_168_ = (L_143_arg3[L_163_[0X003]]);
																(L_168_[1])[L_168_[2]] = L_155_[L_163_[0X00001]];
															end;
														end;
													else
														do
															if not(L_164_ < 0X36) then
																if L_164_ < 0X0037 then
																	repeat
																		local L_169_, L_170_ = L_151_, (L_155_);
																		if not(#L_169_ > 0X0) then
																		else
																			local L_171_ = ({});
																			do
																				for L_172_forvar1, L_173_forvar2 in L_53_, L_169_ do
																					do
																						for L_174_forvar1, L_175_forvar2 in L_53_, L_173_forvar2 do
																							do
																								if not(L_175_forvar2[1] == L_170_ and L_175_forvar2[0X2] >= 0) then
																								else
																									local L_176_ = (L_175_forvar2[2]);
																									if not L_171_[L_176_] then
																										(L_171_)[L_176_] = {
																											L_170_[L_176_]
																										};
																									end;
																									(L_175_forvar2)[0X0001] = L_171_[L_176_];
																									L_175_forvar2[0X2] = 1;
																								end;
																							end;
																						end;
																					end;
																				end;
																			end;
																		end;
																	until true;
																	do
																		return L_155_[L_163_[1]]();
																	end;
																else
																	do
																		if L_164_ ~= 56 then
																			L_155_[L_163_[1]] = L_155_[L_163_[0X003]] < L_155_[L_163_[2]];
																		else
																			L_73_[L_163_[3]] = L_155_[L_163_[1]];
																		end;
																	end;
																end;
															else
																if L_164_ < 0X000034 then
																	L_155_[L_163_[0X1]] = L_81_(L_155_[L_163_[3]], L_155_[L_163_[0x002]]);
																else
																	if L_164_ == 53 then
																		local L_177_ = L_163_[0X1];
																		for L_178_forvar1 = L_177_, L_177_ + (L_163_[0X3] - 1) do
																			(L_155_)[L_178_forvar1] = L_159_[L_147_ + (L_178_forvar1 - L_177_) + 0X1];
																		end;
																	else
																		local L_179_ = (L_163_[1]);
																		local L_180_ = L_155_[L_179_ + 0X2];
																		local L_181_, L_182_ = L_155_[L_179_], (L_155_[L_179_ + 0x1]);
																		L_155_[L_179_] = L_67_(function()
																			for L_183_forvar1 = L_181_, L_182_, L_180_ do
																				(L_56_)(true, L_183_forvar1);
																			end;
																		end);
																		L_154_ = L_163_[3];
																	end;
																end;
															end;
														end;
													end;
												else
													if L_164_ >= 69 then
														if not(L_164_ >= 72) then
															if not(L_164_ < 70) then
																do
																	if L_164_ == 71 then
																		if L_163_[2] == 0X1D then
																			L_154_ = L_154_ - 1;
																			do
																				(L_149_)[L_154_] = {
																					[1] = (L_163_[1] - 0X00a),
																					[3] = (L_163_[3] - 10),
																					[6] = 0X30
																				};
																			end;
																		elseif L_163_[2] ~= 204 then
																			if L_155_[L_163_[0x1]] then
																				L_154_ = L_163_[3];
																			end;
																		else
																			L_154_ = L_154_ - 1;
																			(L_149_)[L_154_] = {
																				[3] = (L_163_[0X3] - 0x45),
																				[1] = (L_163_[1] - 0X45),
																				[0X06] = 0x20
																			};
																		end;
																	else
																		if L_163_[0X0002] ~= 0Xf3 then
																			for L_184_forvar1 = L_163_[0x1], L_163_[0X0003] do
																				L_155_[L_184_forvar1] = nil;
																			end;
																		else
																			do
																				L_154_ = L_154_ - 0X1;
																			end;
																			do
																				L_149_[L_154_] = {
																					[3] = (L_163_[3] - 60),
																					[6] = 90,
																					[0x1] = (L_163_[1] - 60)
																				};
																			end;
																		end;
																	end;
																end;
															else
																(L_155_)[L_163_[1]] = L_155_[L_163_[3]] * L_155_[L_163_[2]];
															end;
														else
															if not(L_164_ < 74) then
																if L_164_ == 75 then
																	if L_155_[L_163_[0X3]] < L_155_[L_163_[0X02]] then
																		do
																			L_154_ = L_163_[0X1];
																		end;
																	end;
																else
																	do
																		L_161_ = L_163_[1];
																	end;
																	L_155_[L_161_]();
																	L_161_ = L_161_ - 1;
																end;
															else
																do
																	if L_164_ ~= 0X49 then
																		L_155_[L_163_[1]] = L_156_[L_163_[3]];
																	else
																		L_155_[L_163_[1]] = L_155_[L_163_[3]] / L_155_[L_163_[2]];
																	end;
																end;
															end;
														end;
													else
														if not(L_164_ >= 0x42) then
															if not(L_164_ < 0X40) then
																if L_164_ ~= 0x041 then
																	L_160_[L_163_[0X4]] = L_155_[L_163_[0X001]];
																else
																	local L_185_ = L_163_[1];
																	L_155_[L_185_] = L_155_[L_185_](L_155_[L_185_ + 0x1]);
																	L_161_ = L_185_;
																end;
															else
																if not(L_155_[L_163_[3]] <= L_163_[7]) then
																	L_154_ = L_163_[1];
																end;
															end;
														else
															if L_164_ >= 67 then
																if L_164_ ~= 68 then
																	L_155_[L_163_[1]] = false;
																else
																	(L_155_[L_163_[0X1]])[L_163_[0X4]] = L_155_[L_163_[2]];
																end;
															else
																L_155_[L_163_[1]] = L_80_(L_155_[L_163_[0x3]], L_155_[L_163_[2]]);
															end;
														end;
													end;
												end;
											else
												if L_164_ >= 0X00059 then
													if L_164_ < 0X005F then
														if L_164_ >= 92 then
															if L_164_ >= 0x5d then
																if L_164_ ~= 94 then
																	do
																		L_155_[L_163_[1]] = L_155_[L_163_[0X3]] >= L_155_[L_163_[2]];
																	end;
																else
																	(L_155_)[L_163_[1]] = L_155_[L_163_[3]] == L_155_[L_163_[2]];
																end;
															else
																local L_186_ = (L_163_[0X3]);
																local L_187_ = L_163_[1];
																if L_186_ ~= 0 then
																	L_161_ = L_187_ + L_186_ - 0X1;
																end;
																local L_188_ = (L_163_[2]);
																local L_189_, L_190_ = nil, nil;
																if L_186_ == 0X01 then
																	L_189_, L_190_ = L_92_(L_155_[L_187_]());
																else
																	do
																		L_189_, L_190_ = L_92_(L_155_[L_187_](L_70_(L_155_, L_187_ + 1, L_161_)));
																	end;
																end;
																if L_188_ == 1 then
																	L_161_ = L_187_ - 0X1;
																else
																	if L_188_ == 0 then
																		L_189_ = L_189_ + L_187_ - 1;
																		L_161_ = L_189_;
																	else
																		L_189_ = L_187_ + L_188_ - 2;
																		L_161_ = L_189_ + 1;
																	end;
																	local L_191_ = (0);
																	for L_192_forvar1 = L_187_, L_189_ do
																		L_191_ = L_191_ + 1;
																		do
																			(L_155_)[L_192_forvar1] = L_190_[L_191_];
																		end;
																	end;
																end;
															end;
														else
															if not(L_164_ < 90) then
																if L_164_ ~= 91 then
																	L_155_[L_163_[1]] = #L_155_[L_163_[3]];
																else
																	do
																		if not(L_155_[L_163_[3]] < L_155_[L_163_[2]]) then
																			L_154_ = L_163_[1];
																		end;
																	end;
																end;
															else
																L_155_[L_163_[1]] = L_155_[L_163_[0X003]] <= L_155_[L_163_[2]];
															end;
														end;
													else
														if not(L_164_ >= 98) then
															if L_164_ < 96 then
																local L_193_ = L_163_[0X001];
																local L_194_ = L_67_(function(...)
																	L_56_();
																	do
																		for L_195_forvar1, L_196_forvar2, L_197_forvar3, L_198_forvar4, L_199_forvar5, L_200_forvar6, L_201_forvar7, L_202_forvar8, L_203_forvar9, L_204_forvar10 in ... do
																			(L_56_)(true, {
																				L_195_forvar1,
																				L_196_forvar2,
																				L_197_forvar3,
																				L_198_forvar4,
																				L_199_forvar5,
																				L_200_forvar6,
																				L_201_forvar7,
																				L_202_forvar8,
																				L_203_forvar9,
																				L_204_forvar10
																			});
																		end;
																	end;
																end);
																(L_194_)(L_155_[L_193_], L_155_[L_193_ + 0X0001], L_155_[L_193_ + 0x00002]);
																L_161_ = L_193_;
																L_155_[L_193_] = L_194_;
																L_154_ = L_163_[0X3];
															else
																if L_164_ ~= 97 then
																	L_155_[L_163_[1]] = L_155_[L_163_[3]] - L_155_[L_163_[0X0002]];
																else
																	L_155_[L_163_[0x001]] = nil;
																end;
															end;
														else
															if not(L_164_ >= 0X64) then
																if L_164_ == 99 then
																	L_155_[L_163_[1]] = L_155_[L_163_[0X3]] ~= L_163_[7];
																else
																	local L_205_ = (L_163_[0X00001]);
																	local L_206_, L_207_ = L_155_[L_205_]();
																	if L_206_ then
																		(L_155_)[L_205_ + 1] = L_207_;
																		L_154_ = L_163_[0X3];
																	end;
																end;
															else
																if L_164_ ~= 0X065 then
																	if L_163_[2] == 105 then
																		L_154_ = L_154_ - 0X1;
																		(L_149_)[L_154_] = {
																			[0X3] = (L_163_[3] - 0X096),
																			[0X6] = 0X4D,
																			[1] = (L_163_[0X0001] - 150)
																		};
																	elseif L_163_[0X2] ~= 212 then
																		repeat
																			local L_209_, L_210_ = L_151_, (L_155_);
																			if #L_209_ > 0 then
																				local L_211_ = ({});
																				for L_212_forvar1, L_213_forvar2 in L_53_, L_209_ do
																					for L_214_forvar1, L_215_forvar2 in L_53_, L_213_forvar2 do
																						if not(L_215_forvar2[1] == L_210_ and L_215_forvar2[0X2] >= 0X0000) then
																						else
																							local L_216_ = (L_215_forvar2[2]);
																							if not(not L_211_[L_216_]) then
																							else
																								(L_211_)[L_216_] = {
																									L_210_[L_216_]
																								};
																							end;
																							L_215_forvar2[1] = L_211_[L_216_];
																							L_215_forvar2[0X2] = 0X1;
																						end;
																					end;
																				end;
																			end;
																		until true;
																		local L_208_ = (L_163_[0X1]);
																		return L_70_(L_155_, L_208_, L_208_ + L_163_[3] - 0x2);
																	else
																		L_154_ = L_154_ - 0X01;
																		do
																			L_149_[L_154_] = {
																				[0X001] = (L_163_[0x1] - 0Xe),
																				[6] = 41,
																				[0X003] = (L_163_[0X0003] - 14)
																			};
																		end;
																	end;
																else
																	repeat
																		local L_218_, L_219_ = L_151_, L_155_;
																		if #L_218_ > 0X0 then
																			local L_220_ = ({});
																			for L_221_forvar1, L_222_forvar2 in L_53_, L_218_ do
																				for L_223_forvar1, L_224_forvar2 in L_53_, L_222_forvar2 do
																					if L_224_forvar2[1] == L_219_ and L_224_forvar2[0x2] >= 0X0 then
																						local L_225_ = (L_224_forvar2[2]);
																						if not(not L_220_[L_225_]) then
																						else
																							do
																								L_220_[L_225_] = {
																									L_219_[L_225_]
																								};
																							end;
																						end;
																						L_224_forvar2[1] = L_220_[L_225_];
																						L_224_forvar2[2] = 0x1;
																					end;
																				end;
																			end;
																		end;
																	until true;
																	local L_217_ = L_163_[0x00001];
																	return L_155_[L_217_](L_70_(L_155_, L_217_ + 0X00001, L_161_));
																end;
															end;
														end;
													end;
												else
													if L_164_ >= 82 then
														if not(L_164_ >= 85) then
															do
																if not(L_164_ < 83) then
																	do
																		if L_164_ == 0X54 then
																			do
																				if L_155_[L_163_[0X3]] == L_163_[7] then
																					L_154_ = L_163_[1];
																				end;
																			end;
																		else
																			local L_226_ = L_163_[1];
																			L_155_[L_226_] = L_155_[L_226_](L_70_(L_155_, L_226_ + 0X001, L_161_));
																			do
																				L_161_ = L_226_;
																			end;
																		end;
																	end;
																else
																	local L_227_ = (L_163_[0X1]);
																	local L_228_, L_229_, L_230_ = L_155_[L_227_]();
																	do
																		if not(L_228_) then
																		else
																			do
																				(L_155_)[L_227_ + 0X00001] = L_229_;
																			end;
																			(L_155_)[L_227_ + 0X00002] = L_230_;
																			L_154_ = L_163_[0X03];
																		end;
																	end;
																end;
															end;
														else
															if not(L_164_ < 87) then
																if L_164_ ~= 0X58 then
																	local L_231_ = L_163_[3];
																	(L_155_)[L_163_[1]] = L_155_[L_231_]..L_155_[L_231_ + 1];
																else
																	if L_155_[L_163_[0x00003]] == L_155_[L_163_[2]] then
																		L_154_ = L_163_[1];
																	end;
																end;
															else
																do
																	if L_164_ ~= 86 then
																		local L_232_, L_233_ = L_163_[1], (L_163_[0X00003]);
																		L_161_ = L_232_ + L_233_ - 1;
																		repeat
																			local L_234_, L_235_ = L_151_, (L_155_);
																			if #L_234_ > 0X0 then
																				local L_236_ = {};
																				do
																					for L_237_forvar1, L_238_forvar2 in L_53_, L_234_ do
																						for L_239_forvar1, L_240_forvar2 in L_53_, L_238_forvar2 do
																							if L_240_forvar2[1] == L_235_ and L_240_forvar2[0X2] >= 0X0000 then
																								local L_241_ = (L_240_forvar2[0x2]);
																								do
																									if not(not L_236_[L_241_]) then
																									else
																										L_236_[L_241_] = {
																											L_235_[L_241_]
																										};
																									end;
																								end;
																								L_240_forvar2[0X1] = L_236_[L_241_];
																								L_240_forvar2[2] = 0X00001;
																							end;
																						end;
																					end;
																				end;
																			end;
																		until true;
																		return L_155_[L_232_](L_70_(L_155_, L_232_ + 0X1, L_161_));
																	else
																		(L_155_)[L_163_[1]] = L_155_[L_163_[0x3]] / L_163_[7];
																	end;
																end;
															end;
														end;
													else
														if not(L_164_ >= 0X4F) then
															do
																if L_164_ < 0X4D then
																	do
																		if L_163_[0X2] == 185 then
																			L_154_ = L_154_ - 1;
																			L_149_[L_154_] = {
																				[0X3] = (L_163_[0X3] - 0xca),
																				[0x01] = (L_163_[1] - 202),
																				[6] = 41
																			};
																		elseif L_163_[2] == 245 then
																			L_154_ = L_154_ - 1;
																			L_149_[L_154_] = {
																				[6] = 0X061,
																				[1] = (L_163_[1] - 204),
																				[3] = (L_163_[0x00003] - 204)
																			};
																		else
																			do
																				(L_155_)[L_163_[1]] = L_159_[L_147_ + 0X1];
																			end;
																		end;
																	end;
																else
																	if L_164_ ~= 78 then
																		if L_163_[0X2] ~= 71 then
																			repeat
																				local L_242_, L_243_ = L_151_, L_155_;
																				if not(#L_242_ > 0X0) then
																				else
																					local L_244_ = {};
																					for L_245_forvar1, L_246_forvar2 in L_53_, L_242_ do
																						for L_247_forvar1, L_248_forvar2 in L_53_, L_246_forvar2 do
																							if not(L_248_forvar2[1] == L_243_ and L_248_forvar2[2] >= 0x00000) then
																							else
																								local L_249_ = (L_248_forvar2[0X2]);
																								if not(not L_244_[L_249_]) then
																								else
																									(L_244_)[L_249_] = {
																										L_243_[L_249_]
																									};
																								end;
																								(L_248_forvar2)[0X1] = L_244_[L_249_];
																								L_248_forvar2[2] = 1;
																							end;
																						end;
																					end;
																				end;
																			until true;
																			return L_70_(L_155_, L_163_[0X001], L_161_);
																		else
																			L_154_ = L_154_ - 0X1;
																			(L_149_)[L_154_] = {
																				[1] = (L_163_[0X1] - 141),
																				[0X6] = 38,
																				[3] = (L_163_[3] - 0X8d)
																			};
																		end;
																	else
																		local L_250_, L_251_ = L_163_[1], ((L_163_[0X0002] - 1) * 50);
																		local L_252_ = L_155_[L_250_];
																		do
																			for L_253_forvar1 = 0X00001, L_161_ - L_250_ do
																				(L_252_)[L_251_ + L_253_forvar1] = L_155_[L_250_ + L_253_forvar1];
																			end;
																		end;
																	end;
																end;
															end;
														else
															if not(L_164_ < 80) then
																if L_164_ ~= 81 then
																	if L_163_[0X002] ~= 196 then
																		do
																			if not L_155_[L_163_[0x1]] then
																				L_154_ = L_163_[3];
																			end;
																		end;
																	else
																		do
																			L_154_ = L_154_ - 0X001;
																		end;
																		L_149_[L_154_] = {
																			[0x0006] = 38,
																			[0X003] = (L_163_[3] - 0X64),
																			[0X1] = (L_163_[0X1] - 0X64)
																		};
																	end;
																else
																	local L_254_ = (L_150_[L_163_[0X3]]);
																	local L_255_ = L_254_[4];
																	local L_256_, L_257_ = #L_255_, nil;
																	do
																		if L_256_ > 0X0 then
																			L_257_ = {};
																			for L_258_forvar1 = 0x1, L_256_ do
																				local L_259_ = L_255_[L_258_forvar1];
																				if L_259_[0x1] ~= 0x0 then
																					L_257_[L_258_forvar1 - 0X01] = L_143_arg3[L_259_[2]];
																				else
																					do
																						(L_257_)[L_258_forvar1 - 1] = {
																							L_155_,
																							L_259_[2]
																						};
																					end;
																				end;
																			end;
																			(L_72_)(L_151_, L_257_);
																		end;
																	end;
																	(L_155_)[L_163_[0X0001]] = L_96_(L_160_, L_254_, L_257_);
																end;
															else
																local L_260_ = (L_163_[1]);
																local L_261_, L_262_ = L_155_[L_260_]();
																if L_261_ then
																	L_154_ = L_163_[0X3];
																	do
																		(L_155_)[L_260_ + 3] = L_262_;
																	end;
																end;
															end;
														end;
													end;
												end;
											end;
										end;
									else
										if not(L_164_ < 0X19) then
											if not(L_164_ >= 0x000026) then
												if not(L_164_ < 31) then
													do
														if not(L_164_ >= 0x000022) then
															if L_164_ < 0X20 then
																(L_155_)[L_163_[1]] = L_41_(L_155_[L_163_[3]], L_155_[L_163_[2]]);
															else
																if L_164_ == 0X000021 then
																	do
																		L_155_[L_163_[0X1]][L_155_[L_163_[0X3]]] = L_155_[L_163_[2]];
																	end;
																else
																	repeat
																		local L_263_, L_264_ = L_151_, (L_155_);
																		if not(#L_263_ > 0) then
																		else
																			local L_265_ = {};
																			do
																				for L_266_forvar1, L_267_forvar2 in L_53_, L_263_ do
																					do
																						for L_268_forvar1, L_269_forvar2 in L_53_, L_267_forvar2 do
																							if not(L_269_forvar2[0x01] == L_264_ and L_269_forvar2[0X2] >= 0X0) then
																							else
																								local L_270_ = (L_269_forvar2[0X00002]);
																								do
																									if not(not L_265_[L_270_]) then
																									else
																										L_265_[L_270_] = {
																											L_264_[L_270_]
																										};
																									end;
																								end;
																								L_269_forvar2[1] = L_265_[L_270_];
																								do
																									(L_269_forvar2)[0X2] = 1;
																								end;
																							end;
																						end;
																					end;
																				end;
																			end;
																		end;
																	until true;
																	return L_155_[L_163_[1]];
																end;
															end;
														else
															if L_164_ < 36 then
																do
																	if L_164_ ~= 35 then
																		do
																			(L_155_)[L_163_[0X1]] = L_155_[L_163_[3]] + L_163_[7];
																		end;
																	else
																		local L_271_, L_272_ = L_163_[0X001], (L_155_[L_163_[0X3]]);
																		L_155_[L_271_ + 0X1] = L_272_;
																		(L_155_)[L_271_] = L_272_[L_163_[0x7]];
																	end;
																end;
															else
																do
																	if L_164_ ~= 0x0025 then
																		L_155_[L_163_[1]] = L_155_[L_163_[0X3]][L_155_[L_163_[2]]];
																	else
																		L_155_[L_163_[0X1]] = L_155_[L_163_[3]] < L_163_[7];
																	end;
																end;
															end;
														end;
													end;
												else
													if L_164_ < 28 then
														if not(L_164_ < 26) then
															if L_164_ == 27 then
																L_155_[L_163_[0x1]] = L_58_(L_155_[L_163_[0X3]], L_155_[L_163_[2]]);
															else
																if L_155_[L_163_[0X0003]] ~= L_155_[L_163_[2]] then
																	L_154_ = L_163_[1];
																end;
															end;
														else
															local L_273_ = L_143_arg3[L_163_[0X3]];
															(L_155_)[L_163_[0X01]] = L_273_[1][L_273_[2]];
														end;
													else
														if L_164_ < 0x1D then
															L_155_[L_163_[0X0001]] = L_155_[L_163_[0X0003]] - L_163_[0X07];
														else
															do
																if L_164_ ~= 30 then
																	local L_274_ = L_163_[0x1];
																	L_155_[L_274_](L_155_[L_274_ + 0X001], L_155_[L_274_ + 0X2]);
																	L_161_ = L_274_ - 0X1;
																else
																	do
																		if L_163_[2] ~= 0X0DB then
																			do
																				repeat
																					local L_275_, L_276_, L_277_ = L_151_, L_155_, L_163_[0X01];
																					if #L_275_ > 0X0000 then
																						local L_278_ = ({});
																						for L_279_forvar1, L_280_forvar2 in L_53_, L_275_ do
																							for L_281_forvar1, L_282_forvar2 in L_53_, L_280_forvar2 do
																								if L_282_forvar2[1] == L_276_ and L_282_forvar2[0X2] >= L_277_ then
																									local L_283_ = L_282_forvar2[2];
																									do
																										if not(not L_278_[L_283_]) then
																										else
																											L_278_[L_283_] = {
																												L_276_[L_283_]
																											};
																										end;
																									end;
																									do
																										(L_282_forvar2)[0X01] = L_278_[L_283_];
																									end;
																									(L_282_forvar2)[0X2] = 1;
																								end;
																							end;
																						end;
																					end;
																				until true;
																			end;
																		else
																			do
																				L_154_ = L_154_ - 1;
																			end;
																			do
																				L_149_[L_154_] = {
																					[0X01] = (L_163_[0x1] - 0X4),
																					[0x6] = 0X30,
																					[3] = (L_163_[0X03] - 4)
																				};
																			end;
																		end;
																	end;
																end;
															end;
														end;
													end;
												end;
											else
												if not(L_164_ >= 44) then
													do
														if not(L_164_ >= 0X029) then
															if L_164_ >= 39 then
																if L_164_ == 40 then
																	do
																		L_155_[L_163_[1]] = L_155_[L_163_[0X3]] ^ L_155_[L_163_[0X2]];
																	end;
																else
																	L_155_[L_163_[1]] = L_73_[L_163_[3]];
																end;
															else
																do
																	(L_155_)[L_163_[1]] = L_155_[L_163_[0X3]];
																end;
															end;
														else
															if not(L_164_ >= 42) then
																local L_284_, L_285_ = L_158_ - L_147_, (L_163_[1]);
																if L_284_ < 0x00000 then
																	L_284_ = -0X0001;
																end;
																for L_286_forvar1 = L_285_, L_285_ + L_284_ do
																	L_155_[L_286_forvar1] = L_159_[L_147_ + (L_286_forvar1 - L_285_) + 1];
																end;
																L_161_ = L_285_ + L_284_;
															else
																if L_164_ ~= 43 then
																	local L_287_ = L_163_[1];
																	local L_288_, L_289_ = L_155_[L_287_]();
																	if L_288_ then
																		for L_290_forvar1 = 0x1, L_163_[2] do
																			do
																				L_155_[L_287_ + L_290_forvar1] = L_289_[L_290_forvar1];
																			end;
																		end;
																		L_154_ = L_163_[0x3];
																	end;
																else
																	do
																		(L_155_)[L_163_[0x01]] = L_82_(L_155_[L_163_[3]]);
																	end;
																end;
															end;
														end;
													end;
												else
													if not(L_164_ < 0X2F) then
														do
															if L_164_ < 0x31 then
																do
																	if L_164_ ~= 48 then
																		L_161_ = L_163_[1];
																		L_155_[L_161_] = L_155_[L_161_]();
																	else
																		repeat
																			local L_291_, L_292_ = L_151_, L_155_;
																			if not(#L_291_ > 0X0) then
																			else
																				local L_293_ = {};
																				for L_294_forvar1, L_295_forvar2 in L_53_, L_291_ do
																					for L_296_forvar1, L_297_forvar2 in L_53_, L_295_forvar2 do
																						if L_297_forvar2[0x1] == L_292_ and L_297_forvar2[2] >= 0X00000 then
																							local L_298_ = L_297_forvar2[0X02];
																							if not(not L_293_[L_298_]) then
																							else
																								L_293_[L_298_] = {
																									L_292_[L_298_]
																								};
																							end;
																							L_297_forvar2[1] = L_293_[L_298_];
																							do
																								L_297_forvar2[2] = 0x1;
																							end;
																						end;
																					end;
																				end;
																			end;
																		until true;
																		return;
																	end;
																end;
															else
																if L_164_ == 50 then
																	if L_155_[L_163_[0X3]] ~= L_163_[0X07] then
																		L_154_ = L_163_[1];
																	end;
																else
																	if not(not(L_155_[L_163_[0X3]] <= L_155_[L_163_[2]])) then
																	else
																		L_154_ = L_163_[1];
																	end;
																end;
															end;
														end;
													else
														if L_164_ < 45 then
															local L_299_ = L_163_[1];
															do
																L_161_ = L_299_ + L_163_[0X3] - 0X00001;
															end;
															L_155_[L_299_](L_70_(L_155_, L_299_ + 0X0001, L_161_));
															do
																L_161_ = L_299_ - 0x0001;
															end;
														else
															if L_164_ == 0x2E then
																L_155_[L_163_[1]] = L_155_[L_163_[0x3]] > L_163_[0X7];
															else
																do
																	L_155_[L_163_[1]] = {};
																end;
															end;
														end;
													end;
												end;
											end;
										else
											if L_164_ >= 0X000C then
												if L_164_ < 18 then
													if L_164_ >= 15 then
														if not(L_164_ >= 16) then
															(L_155_)[L_163_[0X01]] = L_155_[L_163_[0X0003]] % L_163_[7];
														else
															do
																if L_164_ ~= 0x00011 then
																	L_155_[L_163_[1]] = L_155_[L_163_[3]] % L_155_[L_163_[0X0002]];
																else
																	local L_300_ = (L_163_[0X1]);
																	(L_155_[L_300_])(L_155_[L_300_ + 1]);
																	do
																		L_161_ = L_300_ - 1;
																	end;
																end;
															end;
														end;
													else
														if not(L_164_ >= 0XD) then
															do
																(L_155_)[L_163_[1]] = L_155_[L_163_[0X00003]] > L_155_[L_163_[2]];
															end;
														else
															if L_164_ == 14 then
																if L_163_[0X00002] == 0XAF then
																	L_154_ = L_154_ - 1;
																	do
																		L_149_[L_154_] = {
																			[6] = 32,
																			[3] = (L_163_[3] - 0X046),
																			[0X1] = (L_163_[0X1] - 70)
																		};
																	end;
																elseif L_163_[2] == 0X0036 then
																	L_154_ = L_154_ - 1;
																	(L_149_)[L_154_] = {
																		[6] = 100,
																		[0X1] = (L_163_[0X001] - 194),
																		[0X3] = (L_163_[3] - 194)
																	};
																elseif L_163_[2] == 0XA8 then
																	L_154_ = L_154_ - 1;
																	do
																		(L_149_)[L_154_] = {
																			[0X0001] = (L_163_[0X0001] - 173),
																			[3] = (L_163_[3] - 0XaD),
																			[6] = 77
																		};
																	end;
																else
																	do
																		(L_155_)[L_163_[0X001]] = not L_155_[L_163_[3]];
																	end;
																end;
															else
																do
																	L_155_[L_163_[1]][L_163_[4]] = L_163_[0X7];
																end;
															end;
														end;
													end;
												else
													if L_164_ >= 0X15 then
														do
															if not(L_164_ >= 23) then
																if L_164_ == 0x016 then
																	local L_301_ = (L_163_[3]);
																	local L_302_ = (L_155_[L_301_]);
																	do
																		for L_303_forvar1 = L_301_ + 0X1, L_163_[0x2] do
																			do
																				L_302_ = L_302_..L_155_[L_303_forvar1];
																			end;
																		end;
																	end;
																	L_155_[L_163_[0X1]] = L_302_;
																else
																	(L_155_)[L_163_[0x001]] = {
																		L_70_({}, 1, L_163_[0X3])
																	};
																end;
															else
																do
																	if L_164_ == 0X018 then
																		L_155_[L_163_[1]] = L_79_(L_155_[L_163_[0X03]], L_155_[L_163_[2]]);
																	else
																		(L_155_[L_163_[1]])[L_155_[L_163_[0X00003]]] = L_163_[7];
																	end;
																end;
															end;
														end;
													else
														if L_164_ >= 19 then
															if L_164_ ~= 0X000014 then
																(L_155_)[L_163_[1]] = L_160_[L_163_[4]];
															else
																do
																	(L_155_)[L_163_[1]] = L_155_[L_163_[0X0003]][L_163_[0X7]];
																end;
															end;
														else
															(L_155_)[L_163_[0X1]] = L_155_[L_163_[3]] + L_155_[L_163_[0X2]];
														end;
													end;
												end;
											else
												if not(L_164_ >= 0X6) then
													if not(L_164_ < 3) then
														do
															if not(L_164_ >= 4) then
																do
																	(L_155_)[L_163_[0x1]] = L_155_[L_163_[0X3]] * L_163_[0x7];
																end;
															else
																if L_164_ ~= 0x5 then
																	(L_155_)[L_163_[1]] = L_155_[L_163_[3]] ~= L_155_[L_163_[2]];
																else
																	local L_304_ = L_163_[0x1];
																	local L_305_, L_306_ = L_155_[L_304_], ((L_163_[0X2] - 0x01) * 0X0032);
																	for L_307_forvar1 = 1, L_163_[0x3] do
																		L_305_[L_306_ + L_307_forvar1] = L_155_[L_304_ + L_307_forvar1];
																	end;
																end;
															end;
														end;
													else
														do
															if not(L_164_ >= 0X1) then
																local L_308_ = L_163_[0X1];
																local L_309_ = L_67_(function(...)
																	(L_56_)();
																	for L_310_forvar1 in ... do
																		L_56_(true, L_310_forvar1);
																	end;
																end);
																L_309_(L_155_[L_308_], L_155_[L_308_ + 0x1], L_155_[L_308_ + 0x2]);
																L_161_ = L_308_;
																(L_155_)[L_308_] = L_309_;
																L_154_ = L_163_[0X3];
															else
																if L_164_ == 2 then
																	do
																		(L_155_)[L_163_[1]] = L_163_[0x00004] / L_155_[L_163_[2]];
																	end;
																else
																	local L_311_ = (L_163_[1]);
																	local L_312_ = (L_67_(function(...)
																		(L_56_)();
																		for L_313_forvar1, L_314_forvar2 in ... do
																			(L_56_)(true, L_313_forvar1, L_314_forvar2);
																		end;
																	end));
																	L_312_(L_155_[L_311_], L_155_[L_311_ + 0X1], L_155_[L_311_ + 0x2]);
																	L_161_ = L_311_;
																	do
																		L_155_[L_311_] = L_312_;
																	end;
																	L_154_ = L_163_[0X03];
																end;
															end;
														end;
													end;
												else
													if L_164_ >= 9 then
														do
															if not(L_164_ < 10) then
																if L_164_ == 0X0000b then
																	local L_315_ = (L_155_[L_163_[0X0003]] / L_155_[L_163_[0X2]]);
																	(L_155_)[L_163_[0X1]] = L_315_ - L_315_ % 1;
																else
																	L_154_ = L_163_[3];
																end;
															else
																L_155_[L_163_[1]] = L_163_[0X4];
															end;
														end;
													else
														if not(L_164_ < 7) then
															do
																if L_164_ == 8 then
																	if L_163_[0X002] == 114 then
																		do
																			L_154_ = L_154_ - 1;
																		end;
																		(L_149_)[L_154_] = {
																			[1] = (L_163_[0X0001] - 0x000048),
																			[0X6] = 48,
																			[3] = (L_163_[3] - 72)
																		};
																	elseif L_163_[2] ~= 23 then
																		do
																			L_155_[L_163_[0X1]] = -L_155_[L_163_[3]];
																		end;
																	else
																		L_154_ = L_154_ - 0X00001;
																		do
																			L_149_[L_154_] = {
																				[3] = (L_163_[0X3] - 159),
																				[6] = 0X29,
																				[0X00001] = (L_163_[1] - 159)
																			};
																		end;
																	end;
																else
																	do
																		(L_156_)[L_163_[0X003]] = L_155_[L_163_[1]];
																	end;
																end;
															end;
														else
															do
																(L_155_)[L_163_[0X001]] = L_163_[4];
															end;
														end;
													end;
												end;
											end;
										end;
									end;
								end;
							end;
							L_87_(L_153_, L_141_arg1);
							return L_153_;
						end;
						L_39_ = 5;
						continue;
					end;
				end;
			end;
		end;
	end;
	L_39_ = 0x02;
	local L_97_, L_98_ = nil, (nil);
	while true do
		do
			if L_39_ <= 0x0 then
				do
					L_73_[2] = L_63_;
				end;
				break;
			else
				if L_39_ ~= 1 then
					function L_97_()
						local L_316_, L_317_ = 0X0, (nil);
						do
							repeat
								if L_316_ ~= 0 then
									L_317_ = {};
									L_316_ = 2;
								else
									L_316_ = 0X1;
								end;
							until L_316_ >= 2;
						end;
						local L_318_ = {
							{},
							L_19_arg19,
							{},
							nil,
							{},
							L_19_arg19,
							L_19_arg19,
							nil,
							nil
						};
						L_316_ = 0X01A;
						local L_319_, L_320_, L_321_, L_322_, L_323_, L_324_, L_325_, L_326_, L_327_, L_328_, L_329_ = nil, nil, nil, nil, nil, nil, nil, nil, nil, nil, nil;
						repeat
							do
								if not(L_316_ <= 0Xd) then
									if L_316_ <= 20 then
										do
											if L_316_ <= 16 then
												if not(L_316_ <= 14) then
													if L_316_ == 15 then
														do
															(L_318_)[0x9] = L_88_(L_321_, 0X1, 1) ~= 0X0;
														end;
														do
															L_316_ = 0X1C;
														end;
														do
															continue;
														end;
													else
														L_329_ = L_65_() ~= 0;
														L_316_ = 0X000017;
													end;
												else
													L_320_ = L_318_[L_1_arg1];
													L_316_ = 21;
												end;
											else
												if not(L_316_ <= 18) then
													if L_316_ ~= 19 then
														for L_330_forvar1 = 1, L_319_ do
															local L_331_, L_332_ = 1, (nil);
															repeat
																if L_331_ == 0X0 then
																	for L_333_forvar1, L_334_forvar2 in L_13_arg13(L_83_) do
																		local L_335_ = (L_59_[L_334_forvar2]);
																		local L_336_, L_337_ = 1, (nil);
																		while L_336_ ~= 0X2 do
																			if L_336_ == 0X0 then
																				do
																					if L_337_ == 0Xf then
																						local L_338_ = L_317_[L_332_[L_334_forvar2]];
																						local L_339_ = (L_326_[L_338_]);
																						if L_339_ then
																							local L_340_, L_341_ = 0X00000, nil;
																							while L_340_ < 0x0003 do
																								do
																									if L_340_ <= 0X0000 then
																										do
																											(L_332_)[L_335_] = L_339_[L_1_arg1];
																										end;
																										L_340_ = 0X02;
																										continue;
																									else
																										if L_340_ ~= 1 then
																											L_341_ = L_339_[0X0002];
																											do
																												L_340_ = 1;
																											end;
																										else
																											do
																												(L_341_)[#L_341_ + 1] = {
																													L_332_,
																													L_335_
																												};
																											end;
																											L_340_ = 0X3;
																										end;
																									end;
																								end;
																							end;
																						end;
																					elseif L_337_ == 0X2 then
																						(L_332_)[L_334_forvar2] = L_330_forvar1 + L_332_[L_334_forvar2] + 0X1;
																					end;
																				end;
																				L_336_ = 0x002;
																			else
																				L_337_ = L_332_[L_335_];
																				do
																					L_336_ = 0;
																				end;
																			end;
																		end;
																	end;
																	do
																		break;
																	end;
																else
																	L_332_ = L_318_[0X1][L_330_forvar1];
																	do
																		L_331_ = 0;
																	end;
																end;
															until (false);
														end;
														do
															L_316_ = 29;
														end;
														do
															continue;
														end;
													else
														L_318_[18] = L_66_();
														L_316_ = 1;
														continue;
													end;
												else
													if L_316_ == 0X00011 then
														L_323_ = L_318_[0X3];
														L_316_ = 0;
														continue;
													else
														do
															(L_318_)[L_17_arg17] = L_65_();
														end;
														do
															L_316_ = 0x4;
														end;
													end;
												end;
											end;
										end;
									else
										if not(L_316_ <= 24) then
											if not(L_316_ <= 0X1A) then
												if L_316_ ~= 0x1b then
													L_318_[0x8] = L_88_(L_321_, 0x2, 0X001) ~= 0;
													L_316_ = 0x11;
												else
													do
														(L_318_)[7] = L_84_();
													end;
													L_316_ = 0X0013;
													do
														continue;
													end;
												end;
											else
												if L_316_ == 0X19 then
													L_319_ = L_66_() - 21148;
													L_316_ = 14;
													continue;
												else
													L_318_[0X00E] = L_65_();
													L_316_ = 13;
												end;
											end;
										else
											if not(L_316_ <= 0X00016) then
												if L_316_ ~= 23 then
													do
														for L_342_forvar1 = 1, L_84_() do
															L_325_[L_342_forvar1] = {
																L_65_(),
																L_84_()
															};
														end;
													end;
													L_316_ = 6;
													continue;
												else
													do
														for L_343_forvar1 = 1, L_327_ do
															local L_344_, L_345_, L_346_ = 0X1, nil, (nil);
															while (true) do
																if L_344_ ~= 0X000 then
																	do
																		L_345_ = L_65_();
																	end;
																	do
																		L_344_ = 0X0;
																	end;
																else
																	L_346_ = nil;
																	break;
																end;
															end;
															do
																L_344_ = 1;
															end;
															while L_344_ ~= 2 do
																if L_344_ ~= 0 then
																	L_317_[L_343_forvar1 - 1] = L_322_;
																	L_344_ = 0X00000;
																	do
																		continue;
																	end;
																else
																	do
																		if L_345_ == 0X00084 then
																			L_346_ = false;
																		elseif L_345_ == 0X13 then
																			do
																				L_346_ = L_78_();
																			end;
																		elseif L_345_ == 0x0BD then
																			L_346_ = L_75_();
																		elseif L_345_ == 248 then
																			L_346_ = L_66_();
																		elseif L_345_ == 0X056 then
																			do
																				L_346_ = L_48_(L_93_(L_328_), 0X4);
																			end;
																		elseif L_345_ == 0X5b then
																			L_346_ = L_75_();
																		elseif L_345_ == L_35_arg35 then
																			L_346_ = L_5_arg5;
																		elseif L_345_ == 18 then
																			L_346_ = L_48_(L_93_(L_328_), 16);
																		elseif L_345_ ~= 225 then
																		else
																			L_346_ = L_78_() + L_66_();
																		end;
																	end;
																	L_344_ = 0X00002;
																end;
															end;
															local L_347_ = ({
																L_346_,
																{}
															});
															L_344_ = 0X00;
															while (true) do
																if L_344_ == 0X0 then
																	do
																		L_326_[L_322_] = L_347_;
																	end;
																	L_344_ = 1;
																else
																	do
																		L_322_ = L_322_ + 0X001;
																	end;
																	break;
																end;
															end;
															if not(L_329_) then
															else
																(L_63_)[L_95_] = L_347_;
																do
																	L_95_ = L_95_ + 1;
																end;
															end;
														end;
													end;
													L_316_ = 20;
													do
														continue;
													end;
												end;
											elseif L_316_ == 21 then
												for L_348_forvar1 = 1, L_319_ do
													(L_320_)[L_348_forvar1] = {
														[0X0003] = L_86_(),
														[0X1] = L_86_(),
														[2] = L_27_arg27,
														[5] = "B\c\097\/\090\g",
														[7] = 0.47983593100248967,
														[0X0006] = L_84_(),
														[7] = L_65_(),
														[L_3_arg3] = L_65_(),
														[0X4] = 778290516,
														[2] = L_86_(),
														[L_21_arg21] = L_65_()
													};
												end;
												L_316_ = 8;
												continue;
											else
												L_328_ = L_65_();
												L_316_ = 0x10;
												continue;
											end;
										end;
									end;
								else
									if not(L_316_ <= 6) then
										if L_316_ <= 9 then
											do
												if L_316_ <= 7 then
													L_322_ = 1;
													L_316_ = 0XF;
													do
														continue;
													end;
												else
													do
														if L_316_ ~= 8 then
															do
																L_326_ = {};
															end;
															L_316_ = 0X0000A;
														else
															L_318_[L_33_arg33] = L_66_();
															L_316_ = 0X0002;
															do
																continue;
															end;
														end;
													end;
												end;
											end;
										else
											if not(L_316_ <= 0XB) then
												if L_316_ == 0Xc then
													do
														for L_349_forvar1 = 0, L_324_ - L_1_arg1 do
															(L_323_)[L_349_forvar1] = L_97_();
														end;
													end;
													L_316_ = 0X0b;
												else
													L_318_[2] = L_84_();
													L_316_ = 25;
													continue;
												end;
											else
												if L_316_ == 0x0A then
													L_318_[0x00010] = L_65_();
													L_316_ = 0X1b;
													continue;
												else
													(L_318_)[4] = L_325_;
													do
														L_316_ = 24;
													end;
													do
														continue;
													end;
												end;
											end;
										end;
									else
										do
											if not(L_316_ <= 0X2) then
												do
													if L_316_ <= 4 then
														if L_316_ ~= 3 then
															(L_318_)[15] = L_65_();
															do
																L_316_ = 5;
															end;
															continue;
														else
															L_325_ = {};
															L_316_ = 12;
															do
																continue;
															end;
														end;
													else
														if L_316_ ~= 0x5 then
															L_318_[6] = L_84_();
															L_316_ = 0X9;
															do
																continue;
															end;
														else
															L_327_ = L_66_() - 0x163F1;
															do
																L_316_ = 22;
															end;
															continue;
														end;
													end;
												end;
											else
												if L_316_ <= 0 then
													do
														L_324_ = L_66_() - L_31_arg31;
													end;
													L_316_ = 0x3;
													continue;
												elseif L_316_ == 0x01 then
													(L_318_)[18] = L_66_();
													do
														L_316_ = 18;
													end;
												else
													L_321_ = L_65_();
													L_316_ = 0X007;
													continue;
												end;
											end;
										end;
									end;
								end;
							end;
						until L_316_ > 28;
						return L_318_;
					end;
					L_39_ = 1;
				else
					L_98_ = L_97_();
					L_39_ = 0;
					continue;
				end;
			end;
		end;
	end;
	L_63_ = L_19_arg19;
	return L_96_(L_61_, L_98_, L_19_arg19)(...);
end)(0X001, 7997, 0X5, 0X04d, true, 0X00048, setfenvunpack, string.char, assert, false, ipairs, pcall, coroutine.yield, 2, 0X000011, tostring, nil, string, 4, bit32.band, string.byte, type, coroutine.wrap, 0, 0.5376230789353308, rawset, string.match, error, 0X13b8d, tonumber, 0XE, 0X9, 0X79, bit32, {
	0X5612,
	0X0002e55801B,
	414698066,
	431778871,
	0X1E9175DC,
	3726942840,
	3588070322,
	2529750585,
	0X00d0b0F236
}, ...);
